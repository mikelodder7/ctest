var N = null;var searchIndex = {};
searchIndex["ctest"]={"doc":"ctest - an FFI binding validator","items":[[3,"TestGenerator","ctest","A builder used to generate a test suite.",N,N],[11,"new","","Creates a new blank test generator.",0,[[],["self"]]],[11,"header","","Add a header to be included as part of the generated C file.",0,[[["self"],["str"]],["self"]]],[11,"include","","Add a path to the C compiler header lookup path.",0,[[["self"],["p"]],["self"]]],[11,"flag","","Add a flag to the C compiler invocation.",0,[[["self"],["str"]],["self"]]],[11,"out_dir","","Configures the output directory of the generated Rust and…",0,[[["self"],["p"]],["self"]]],[11,"target","","Configures the target to compile C code for.",0,[[["self"],["str"]],["self"]]],[11,"define","","Set a `-D` flag for the C compiler being called.",0,[[["self"],["str"],["option",["str"]]],["self"]]],[11,"cfg","","Set a `--cfg` option with which to expand the Rust FFI…",0,[[["self"],["str"],["option",["str"]]],["self"]]],[11,"type_name","","Configures how a Rust type name is translated to a C type…",0,[[["self"],["f"]],["self"]]],[11,"field_name","","Configures how a Rust struct field is translated to a C…",0,[[["self"],["f"]],["self"]]],[11,"skip_field","","Configures whether all tests for a field are skipped or not.",0,[[["self"],["f"]],["self"]]],[11,"skip_field_type","","Configures whether tests for the type of a field is…",0,[[["self"],["f"]],["self"]]],[11,"skip_signededness","","Configures whether a types signededness is tested or not.",0,[[["self"],["f"]],["self"]]],[11,"skip_fn","","Configures whether tests for a function definition are…",0,[[["self"],["f"]],["self"]]],[11,"skip_static","","Configures whether tests for a static definition are…",0,[[["self"],["f"]],["self"]]],[11,"skip_fn_ptrcheck","","Configures whether tests for a function pointer's value…",0,[[["self"],["f"]],["self"]]],[11,"skip_const","","Configures whether the tests for a constant's value are…",0,[[["self"],["f"]],["self"]]],[11,"skip_type","","Configures whether the tests for a typedef are emitted.",0,[[["self"],["f"]],["self"]]],[11,"skip_struct","","Configures whether the tests for a struct are emitted.",0,[[["self"],["f"]],["self"]]],[11,"fn_cname","","Configures the name of a function in the generate C code.",0,[[["self"],["f"]],["self"]]],[11,"generate","","Generate all tests.",0,[[["self"],["p"],["str"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"default","","",0,[[],["self"]]]],"paths":[[3,"TestGenerator"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
